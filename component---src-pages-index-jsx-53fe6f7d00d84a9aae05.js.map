{"version":3,"sources":["webpack:///./src/components/introduction.jsx","webpack:///./src/utils/helper.js","webpack:///./src/pages/index.jsx"],"names":["Introduciton","style","display","href","getPublishYearOfPost","post","String","Date","node","frontmatter","date","getFullYear","pageQuery","BlogIndex","data","location","siteTitle","site","siteMetadata","title","postsIndexedByYears","posts","uniqueYearsSet","Set","map","add","Array","from","i","year","push","indexPostsByYear","allMarkdownRemark","edges","years","Object","keys","sort","reverse","align","postsOfThisYear","Fragment","fields","slug","key","marginBottom","rhythm","boxShadow","to","renderPost"],"mappings":"+OAiDeA,EA9CM,WACT,OAuBV,OACE,yBACEC,MAAO,CACLC,QAAS,SAGX,iDAEE,6BACA,6BAHF,kCAIE,uBAAGC,KAAK,yBAAR,UAJF,wBAKE,6BACA,6BANF,4DAOE,6BAPF,+J,oCCjCAC,G,8BAAuB,SAACC,GAAD,OAC3BC,OAAO,IAAIC,KAAKF,EAAKG,KAAKC,YAAYC,MAAMC,iBCiDjCC,GAFEC,UAvBG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EDFwB,SAACC,GAC/B,IAAMD,EAAsB,GACtBE,EAAiB,IAAIC,IAY3B,OAXAF,EAAMG,KAAI,SAACnB,GAAD,OAAUiB,EAAeG,IAAIrB,EAAqBC,OACnCqB,MAAMC,KAAKL,GACnBE,KAAI,SAACI,GAEpB,OADAR,EAAoB,GAAGQ,GAAO,GACvB,QAETP,EAAMG,KAAI,SAACnB,GACT,IAAMwB,EAAOzB,EAAqBC,GAElC,OADAe,EAAoB,GAAGS,GAAQC,KAAKzB,GAC7B,QAEFe,ECZqBW,CAAiBjB,EAAKkB,kBAAkBC,OAC9DC,EAAQC,OAAOC,KAAKhB,GAAqBiB,OAAOC,UACtD,OACE,kBAAC,IAAD,CAAQvB,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,EAAD,MACA,wBAAIoB,MAAM,UAAV,cACCL,EAAMV,KAAI,SAACK,GACV,IAAMW,EAAkBpB,EAAoBS,GAC5C,OACE,kBAAC,IAAMY,SAAP,KACGD,EAAgBhB,KAAI,YACnB,OA9BK,SAAChB,GAClB,IAAMW,EAAQX,EAAKC,YAAYU,OAASX,EAAKkC,OAAOC,KACpD,OACE,6BAASC,IAAKpC,EAAKkC,OAAOC,MACxB,wBACE1C,MAAO,CACL4C,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAM7C,MAAO,CAAE8C,UAAW,QAAUC,GAAIxC,EAAKkC,OAAOC,MACjDxB,KAoBU8B,CAD0B,EAAXzC,eAYd,e","file":"component---src-pages-index-jsx-53fe6f7d00d84a9aae05.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst Introduciton = () => {\n  const data = useStaticQuery(graphql`\n    query IntroductionQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <div\n      style={{\n        display: 'flex'\n      }}\n    >\n      <p>\n        Hi, I am Abhishek !\n        <br />\n        <br />I live in Bangalore and work at\n        <a href=\"https://www.gojek.io/\"> Gojek</a> as Product Engineer.\n        <br />\n        <br />I am passionate about programming, writing and knowledge.\n        <br />\n        This zone is an attempt to outline my journey in tech and other\n        veriticals of my interest, right from the beginning. Hit me up on my\n        socials to connect !\n      </p>\n    </div>\n  );\n};\n\nexport default Introduciton;\n","const getPublishYearOfPost = (post) =>\n  String(new Date(post.node.frontmatter.date).getFullYear());\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\nexport const getShortDate = (d) => {\n  const date = new Date(d);\n  const month = monthNames[date.getMonth()].slice(0, 3);\n  const day = String(date.getDate());\n  return day.length === 1 ? `${month} 0${day}` : `${month} ${day}`;\n};\n\nexport const indexPostsByYear = (posts) => {\n  const postsIndexedByYears = {};\n  const uniqueYearsSet = new Set();\n  posts.map((post) => uniqueYearsSet.add(getPublishYearOfPost(post)));\n  const uniqueYearsArray = Array.from(uniqueYearsSet);\n  uniqueYearsArray.map((i) => {\n    postsIndexedByYears[`${i}`] = [];\n    return null;\n  });\n  posts.map((post) => {\n    const year = getPublishYearOfPost(post);\n    postsIndexedByYears[`${year}`].push(post);\n    return null;\n  });\n  return postsIndexedByYears;\n};\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Introduction from '../components/introduction';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\nimport { indexPostsByYear } from '../utils/helper';\n\nconst renderPost = (node) => {\n  const title = node.frontmatter.title || node.fields.slug;\n  return (\n    <article key={node.fields.slug}>\n      <li\n        style={{\n          marginBottom: rhythm(1 / 4)\n        }}\n      >\n        <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n          {title}\n        </Link>\n      </li>\n    </article>\n  );\n};\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const postsIndexedByYears = indexPostsByYear(data.allMarkdownRemark.edges);\n  const years = Object.keys(postsIndexedByYears).sort().reverse();\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Introduction />\n      <h3 align=\"center\">Blog posts</h3>\n      {years.map((year) => {\n        const postsOfThisYear = postsIndexedByYears[year];\n        return (\n          <React.Fragment>\n            {postsOfThisYear.map(({ node }) => {\n              return renderPost(node);\n            })}\n          </React.Fragment>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}